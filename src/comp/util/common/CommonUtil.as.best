package comp.util.common{
	import flash.utils.Dictionary;
	
	import mx.collections.ArrayCollection;
	import mx.collections.Sort;
	import mx.collections.SortField;
	import mx.controls.Alert;
	import mx.managers.PopUpManager;
	import mx.utils.ObjectProxy;
	
	import asset.DFS.timeSeries.meteogram.style.ChartStyleAssets;
	
	public class CommonUtil{
		
		private static var _instance:CommonUtil;
		
		private var peak_temperature:Number;
		private var nadir_temperature:Number;
		private var peak_prcp:Number;
		
		public function initPeakAndNadir():void{
			this.peak_temperature = NaN;
			this.nadir_temperature = NaN;
			this.peak_prcp = NaN;
		}
		
		public function getPeak_temperature():Number{ return peak_temperature;}
		public function getNadir_temperature():Number{ return nadir_temperature;}
		public function getPeak_Prcp():Number{ return peak_prcp;}
		
		public function CommonUtil(e:CommonUtilEnforcer){
			if(e != null){
				//do something
			}else{
				throw new Error("It can\'t be done!! Call getInstance() function instead. haha.")
			}
		}
		
		
		public static function getInstance():CommonUtil{
			if(_instance == null)
				_instance = new CommonUtil(new CommonUtilEnforcer);
			return _instance;
		}
		
		
		public function computeVerticalAxisMinMax(axisVal:Number, interval:Number, isMaximum:Boolean=true):Number{
			if(axisVal % interval == 0) return axisVal;
			
			var computed:Number;			
			if(isMaximum){
				var diff:Number = Math.ceil(axisVal/10)*10 - axisVal;
				if(diff > interval){
					diff-=interval;
					computed = axisVal + diff;
				}else if(diff < interval){
					computed = Math.ceil(axisVal/10)*10;
				}
			}else{
				var diff:Number = axisVal - Math.floor(axisVal/10)*10;
				if(diff> interval){
					diff = diff-interval;
					computed = axisVal - diff;
				}else if(diff < interval){
					computed = Math.floor(axisVal/10)*10;
				}
				
			}
			
			
			return computed;
		}
		
		
		
		public function getStrokeColourByModelName(baseModelName:String,isColoumnSeries:Boolean=false,isColoumnSelected:Boolean=false,isMEDM:Boolean=false):int{
			var colour:int;
			if(! isColoumnSeries){
				switch(baseModelName){
					case "series_pmos": colour = ChartStyleAssets.ST_SHRT_PMOS.color; break;
					case "series_rdps": colour = ChartStyleAssets.ST_SHRT_RDPS.color; break;
					case "series_best": colour = ChartStyleAssets.ST_SHRT_KWRF.color; break;//doejeon Oct2015
					case "series_kwrf": colour = ChartStyleAssets.ST_SHRT_KWRF.color; break;
					case "series_ecmw": colour = ChartStyleAssets.ST_SHRT_ECMW.color; break;
				}
			}else{
				if(baseModelName=="series_pmos"){
					colour = (isColoumnSelected)? ChartStyleAssets.SEL_SHRT_PMOS.color : ChartStyleAssets.SC_SHRT_PMOS.color; 
				}else if(baseModelName=="series_rdps"){
					colour = (isColoumnSelected)? ChartStyleAssets.SEL_SHRT_RDPS.color : ChartStyleAssets.SC_SHRT_RDPS.color; 
				}else if(baseModelName=="series_kwrf"){
					colour = (isColoumnSelected)? ChartStyleAssets.SEL_SHRT_KWRF.color : ChartStyleAssets.SC_SHRT_KWRF.color; 
				}else if(baseModelName=="series_best"){ //doejeon Oct2015
					colour = (isColoumnSelected)? ChartStyleAssets.SEL_SHRT_KWRF.color : ChartStyleAssets.SC_SHRT_KWRF.color; 
				}else if(baseModelName=="series_ecmw"){
					if(!isMEDM){
						colour = (isColoumnSelected)? ChartStyleAssets.SEL_SHRT_ECMW.color : ChartStyleAssets.SC_SHRT_ECMW.color; 
					}else{
						colour = ChartStyleAssets.SC_MEDM_ECMW.color; 
					}
				}else if(baseModelName=="series_gdps"){
					colour = ChartStyleAssets.SC_MEDM_GDPS.color; 
				}else if(baseModelName=="series_epsg"){
					colour = ChartStyleAssets.SC_MEDM_EPSG.color; 
					//					colour = ChartStyleAssets.SC_SHRT_RDPS.color; 
				}
			}
			//			Alert.show(colour,baseModelName)
			return colour;
		}
		
		/**
		 * 모델비교>?
		 * */
		public function getBasedOnStr(baseModelName:String,isMEDM:Boolean,isMMX:Boolean=false,isR12:Boolean=false):String{
			var basedOn:String;
			switch(baseModelName){
				case "BEST":  basedOn = "BEST(UM 12km L70)"; break;
				case "PMOS":  basedOn = "MOS(UM 12km L70)"; break;
				case "RDPS":  basedOn = "PPM/RDAPS(UM 12km L70)"; break;
				case "KWRF":  basedOn = "PPM/KWRF(WRF 10km L40)"; break;
				case "ECMWF": basedOn = "PPM/ECMWF(ECMWF 0.25 º)"; break;
				case "GDPS":  basedOn = (isMMX)? "MOS(GDPS)" : "MOS/PPM/GDPAS(UM N512 L70)"; break;
				case "PMOS2": basedOn = "MOS(GDPS)"; break;
				case "EPSG": basedOn =  (isR12)? "EPSG(UM N320 L70)" : "MOS(EPSG N320 L70)"; break;
			}
			
			return basedOn;
		}
		
		/**
		 *       MOS(UM 12km L70)
		 PPM/RDAPS(UM 12km L70)
		 PPM/KWRF(WRF 10km L40)
		 PPM/ECMWF(ECMWF 0.25도) <- 도는 동그라미
		 SSPS
		 * 
		 MOS(EPSG N320 L70)
		 MOS/PPM/GDAPS(UM N512  L70)
		 PPM/ECMWF(ECMWF 0.25도)
		 * */
		
		public function getBasalModelStr(isMulti:Boolean, isMEDM:Boolean, baseModel:String, varName:String):String{
			var basedOn:String;
			if(baseModel=="PMOS"){
				//				if(isMulti){
				basedOn = "MOS(UM 12km L70)";
				//				}else{
				//					if(varName)
				//					basedOn = "MOS(UM 12km L70)";
				//				}
			}else if(baseModel=="RDPS"){ //clear
				if(isMulti){
					basedOn = "PPM/RDAPS(UM 12km L70)";
				}else{
					if(varName=="POP"||varName=="SKY"||varName=="PTY"){
						basedOn = "PPM(UM 12km L70)";	
					}else{
						basedOn = "RDAPS(UM 12km L70)";
					}
				}
			}else if(baseModel=="KWRF"){ //clear
				if(isMulti){
					basedOn = "PPM/KWRF(WRF 10km L40)";
				}else{
					if(varName=="POP"||varName=="SKY"||varName=="PTY"){
						basedOn = "PPM(WRF 10km L40)";	
					}else{
						basedOn = "KWRF(WRF 10km L40)";
					}
				}
			}else if(baseModel=="ECMWF"){
				if(isMulti){
					basedOn = "PPM/ECMWF(ECMWF 0.25 º)";
				}else{
					if(varName=="POP"||varName=="SKY"||varName=="PTY"){
						basedOn = "PPM(ECMWF 0.25 º)";	
					}else{
						basedOn = "ECMWF(ECMWF 0.25 º)";
					}
				}
			}else if(baseModel=="EPSG"){ //clear
				if(varName=="R12"){
					basedOn = "EPSG(EPSG N320 L70)";
				}else{
					basedOn = "MOS(EPSG N320 L70)";
				}
			}else if(baseModel=="GDPS" || baseModel=="PMOS2"){ //clear
				if(isMulti){
					basedOn = "MOS/PPM/GDAPS(UM N512 L70)";
				}else{
					if(baseModel=="PMOS2"){ //GDAPS MOS Min-max Temperature
						basedOn = "MOS(UM N512 L70)"; //????? 확인 필요!!!!!!!!!!!!!!!
					}else{
						if(varName=="R12"||varName=="S12")
							basedOn = "GDAPS(UM N512 L70)";
						else
							basedOn = "PPM(UM N512 L70)";	
					}
				}
			}else if(baseModel=="SSPS"){ //clear
				basedOn = "SSPS(UM 12km L70)";
			}else if(baseModel=="BEST"){ //clear
				basedOn = "BEST(UM 12km L70)";
			}
			
			
			return basedOn;
		}
		
		
		public function getBaseModelIndex(baseModelName:String,isMEDM:Boolean):int{
			var index:int;
			switch(baseModelName){
				case "PMOS":  index = 2; break;
				case "RDPS":  index = 3; break;
				case "BEST":  index = (isMEDM)? 1: 1; break;
				case "EPSG":  index = 2; break;
				case "GDPS":  index = 3; break;
				case "PMOS2": index = 3; break;
				case "ECMWF": index = (isMEDM)? 4 : 4; break;
			}
			return index;
		}
		
		public function getBaseModelIndex2(dic:Dictionary,modelName:String,isMEDM:Boolean):int{
			var str:String='';
			var index:int;
			
			if(!isMEDM){
				
				if(dic['PMOS']){
					index = 1;
				}else if(dic['RDPS']){
					index = 2;
//				}else if(dic['KWRF']){
//					index = 3;
				}else if(dic['ECMWF']){
					index = 3;
				}
				
			}else{
				if(modelName=='PMOS2'){  //MMX
					if(dic['GDPS']){
						index = 1;
					}else{
						index = 2;
					}
				}else{                  // other MEDM var
					if(dic['GDPS']){
						index = 1;
					}else{
						index = 2;
					}
				}	
			}
			
			return index;
		}
		
		public function isFileExist(dic:Dictionary,modelName:String):Boolean{
			var isExist:Boolean;
			if(dic[modelName]){
				isExist = true;
			}else{
				isExist = false;
			}
			return isExist;
		}
		
		//adios
		//
		public function getBaseXML(dic:Dictionary, modelName:String, isMEDM:Boolean):XML{
			//			if(modelName=="EPSG"){
			//				
			//			}
			var str:String='';
			var baseXML:XML;
			if(dic['KWRF']){
				if(modelName=='KWRF'){
					if(dic['PMOS']){
						baseXML = new XML(dic['PMOS']);
						str+='axisProvider:: PMOS\n'
					}else if(dic['RDPS']){
						baseXML = new XML(dic['RDPS']);
						str+='axisProvider:: RDPS\n'
					}else if(dic['ECMWF']){
						baseXML = new XML(dic['ECMWF']);
						str+='axisProvider:: ECMWF\n'
					}else{
						baseXML = new XML(dic['KWRF']);
					}
					str+='baseModel::';
				}
				str+='[KWARF]\n';
			}
			if(dic['ECMWF']){
				if(modelName=='ECMWF'){
					str+='baseModel::';
					if(isMEDM){
						if(dic['PMOS2']){
							baseXML = new XML(dic['PMOS2']);
							str+='[PMOS2 MEDM]\n';
						}else if(dic['EPSG']){
							baseXML = new XML(dic['EPSG']); //adios
							str+='[EPSG MEDM]\n';
						}else if(dic['GDPS']){
							baseXML = new XML(dic['GDPS']);
							str+='[GDPS MEDM]\n';
						}else if(dic['ECMWF']){
							baseXML = new XML(dic['ECMWF']);
							str+='[ECMWF MEDM]\n';
						}
					}else{
						baseXML = new XML(dic['ECMWF']);
						str+='[ECMWF shrt]\n';
					}
				}
				str+='ECMWF isExists\n';
			}	
			if(dic['RDPS']){
				if(modelName=='RDPS'){
					baseXML = new XML(dic['RDPS']);
					str+='baseModel::';
				}
				str+='RDPS isExists\n';
			}
			//doejeon Oct2015	
			if(dic['BEST']){
				if(modelName=='BEST'){
					baseXML = new XML(dic['BEST']);
					str+='baseModel::';
				}
				str+='RDPS isExists\n';
			}
			if(dic['PMOS']){
				if(modelName=='PMOS'){
					baseXML = new XML(dic['PMOS']);
					str+='baseModel::';
				}
				str+='MOS isExists\n';
			}
			if(dic['EPSG']){ //adios
				if(modelName=='EPSG'){
					baseXML = new XML(dic['EPSG']);
					str+='baseModel::';
				}
				str+='EPSG MEDM isExists\n';
			}	
			if(dic['PMOS2']){
				if(modelName=='PMOS2'){
					baseXML = new XML(dic['PMOS2']);
					str+='baseModel::';
				}
				str+='PMOS2 MEDM isExists\n';
			}	
			if(dic['GDPS']){
				if(modelName=='GDPS'){
					baseXML = new XML(dic['GDPS']);
					str+='baseModel::';
				}
				str+='GDPS isExists\n';
			}	
			
			
			//showAlertDialogOnScreenTop(str, 'CommonUtil.getInstance().getBaseXML()');
			
			return baseXML;
		}
		
		
		
		public  function xmlListToObjectArray(xmlList:XMLList, isTemperature:Boolean = false, isKindOfPrcp:Boolean=false):Array{
			var arr:Array = new Array();
			var arr_4assignMaxMin:Array = new Array();
			for each(var xml:XML in xmlList){
				var childs:XMLList = xml.attributes(); 
				var obj:Object = new Object();
				for each(var child:XML in childs){
					var nodeName:String = child.name().toString();
					var nodeValue:Number =  Number(child.(nodeName));//R12, S12 에어리어 시리즈 인터폴레이션 땜에 데이터를 뉴메릭으로 랩핑
					var nodeVal_str:String = child.(nodeName).toString();
					obj[nodeName] =(nodeName=='lst')? nodeVal_str:nodeValue;			            	
					
					//멀티차트 기온 민맥스 및 최고 강수 뽑기					
					if(isKindOfPrcp && nodeName=='pr90th'){
						if(!isNaN(nodeValue)) arr_4assignMaxMin.push(nodeValue);
					}else if(isTemperature){
						if(nodeName=='pr10th' || nodeName=='pr90th'){
							if(!isNaN(nodeValue)) arr_4assignMaxMin.push(nodeValue);
						}
					}
				}
				
				arr.push(new ObjectProxy(obj));
			}
			
			//			    if(isTemperature)	
			//				//멀티차트 기온 민맥스 뽑기					
			if(isTemperature){
				var maxVal:Number =  Math.max.apply(null, arr_4assignMaxMin)
				var minVal:Number =   Math.min.apply(null, arr_4assignMaxMin)
				//			    	Infinity
				if(maxVal != Infinity  && minVal != Infinity && !isNaN(maxVal)  && !isNaN(minVal) ){
					//						trace('Temperature minMax count(n):: '+arr_4assignMaxMin.length +'\nMax:: ' + maxVal + ' / Min:: ' +minVal );
					assignMaxMin(maxVal , minVal);
				}else{
					//						trace('! minMaxVal is not a number !\n\n');
				}
			}
			
			//멀티차트 기온 민맥스 뽑기					
			if(isKindOfPrcp){
				var maxPrcp:Number =  Math.max.apply(null, arr_4assignMaxMin);
				//			    	trace("maxPrcp. " + maxPrcp+"\n")
				if(maxPrcp != Infinity && !isNaN(maxPrcp)){
					//			    		trace("fxxkin\' a")
					assignMaxPrcp(maxPrcp);
					
				}else{
					//			    		trace("fxxk..")
				}
			}
			
			return arr;
		}					
		
		
		private function assignMaxMin(max:Number, min:Number):void{
			if(isNaN(peak_temperature) && isNaN(nadir_temperature)){
				trace("isNaN(peak_temperature) && isNaN(nadir_temperature)")
				peak_temperature = max;
				nadir_temperature = min;
			}else{
				if(max > peak_temperature){
					peak_temperature = max;
				}
				if(min < nadir_temperature){
					nadir_temperature = min;
				}
			}
		}
		
		private function assignMaxPrcp(prcp:Number):void{
			if(isNaN(peak_prcp)){
				peak_prcp = prcp;
			}else{
				if(prcp > peak_prcp){
					peak_prcp = prcp;
					trace("[Prcp.] "+prcp)
				}
			}
		}
		
		
		
		private function iPad2(num:Number):String{
			return (num < 10)? '0'+num : num+'';
		}
		
		
		public function showAlertDialogOnScreenTop(message:String,title:String='noTitle'):void{
			var cornerGutter:Number = 20; 
			var topRightCorner:Alert =Alert.show(message,title);
			topRightCorner.width = 400;
			PopUpManager.centerPopUp(topRightCorner);
			topRightCorner.y = cornerGutter
			topRightCorner.y = 0;
		}
		
		private function getCloudCoverIndex(value:Object):uint{
			var val:Number = Number(value);
			if(0 <= val && val < 2.5)
				return 1;
			else if(2.5 <= val && val <5 )
				return 2;
			else if(5 <= val && val < 7.5)
				return 3;
			else if(7.5 <= val && val <= 10)
				return 4;
			else 	
				return 18;
		}
		
		
		private function getPrecipitationTypeIndex(dataSet:XML):String{
			var arr:ArrayCollection = new ArrayCollection([
				{type:"1.0", percentage: dataSet.@rain}, //rain
				{type:"2.0", percentage: dataSet.@sleet}, //sleet
				{type:"3.0", percentage: dataSet.@snow} //snow
			]);
			var sortField:SortField = new SortField();
			sortField.name = "percentage";
			sortField.numeric = true;
			sortField.descending = true;
			var numericDataSort:Sort = new Sort();
			numericDataSort.fields = [sortField];
			arr.sort = numericDataSort;
			arr.refresh();
			
			return (Number(arr[0].percentage)!=0)? arr[0].type.toString() : "0.0";
		}
		
		public function renameDscendantAttributes(epsgXml:XML,varType:String,grCode:Number):XML{
			if(varType=='MMX' || varType=='R12'){
				for each(var node:XML in epsgXml.regionGroup[grCode].descendants("@median")){
					node.setName("val");
				}
			}else if(varType=="SKY"){
				for each(var node:XML in epsgXml.regionGroup[grCode].descendants("@median")){
					node.parent().@median = getCloudCoverIndex(node.parent().@median);
					node.setName("val");
				}
			}else if(varType=="PTY"){
				for each(var node:XML in epsgXml.regionGroup[grCode].descendants("@rain")){
					if(node){
						node.parent().@rain = getPrecipitationTypeIndex(node.parent());
						node.setName("val");
					}
					
				}
			}	
			
			return epsgXml;
		}
		
	} //cls
	
}

 //pkg

class CommonUtilEnforcer{}