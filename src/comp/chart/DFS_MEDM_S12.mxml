<?xml version="1.0" encoding="utf-8"?>
<mx:ColumnChart xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="150" 
	gutterLeft="35" gutterRight="35"
	columnWidthRatio="1.0"
	visible="true"
	initialize="init()"
	creationComplete="moveAxisLabel()"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.graphics.SolidColor;
			import mx.graphics.Stroke;
			import mx.controls.Alert;
			import mx.charts.chartClasses.CartesianCanvasValue;
			import mx.charts.chartClasses.CartesianDataCanvas;
			import asset.DFS.timeSeries.meteogram.style.ChartStyleAssets;
			import mx.controls.Label;


			//ECMWF
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_odd/utc00_odd_150.png")] 
			public var UTC00_bg:Class; //ecmwwf 00utc ODD (dashedLine n shade)
			//ECMWF
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_even/utc00_even_150.png")] 
			public var UTC00_bg_even:Class; //ecmwf 00utc EVEN(dashedLine n shade)
			//ECMWF
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC12_bg/utc12_150.png")] 
			public var UTC12_bg_ecmwf:Class; //ecmwf 12UTC dashedLine only

			//GDAPS			
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC12_bg_279hrs/utc12_279hrs_150.png")] 
			public var UTC12_bg_dashed:Class;
			//GDAPS			
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_279hrs_odd/utc00_279hrs_odd_145.png")] 
			public var UTC00_bg_279hrs:Class;
			//GDAPS			
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_279hrs_even/utc00_279hrs_even_145.png")] 
			public var UTC00_bg_279hrs_even:Class;	
			
				
				
			private function init():void{
				trace("DFS_MEDM_S12");
//				callLater(resetLinearAxisData);
			}
			
			private function resetLinearAxisData():void{
				axis_ver.maximum += Math.ceil(axis_ver.computedMaximum * 0.2);
				if(axis_ver.maximum > 6){
					axis_ver.interval =Math.ceil((axis_ver.maximum )/6);
				}else{
					axis_ver.interval = axis_ver.maximum / 6;
				}
//				addAnnotationElements();
			}
			
			
			private function addAnnotationElements():void{
//				if(this.dataProvider != null){
//					for each(var item:XML in this.dataProvider){
//						addLabelsToColumn(item["@lst"], item["@val"]);
//					}
//				}
				//모든 데이터가 0일 때 자동으로 컴퓨티드 맥심엄 100으로 잡힘 ㅡ,.ㅡ 어케함?
//				if( axis_ver.maximum < 10 ){ //|| axis_ver.computedMaximum==100
//					axis_ver.maximum = 10; 
//				}
//				axis_ver.maximum += Math.ceil(axis_ver.computedMaximum * 0.2);
//				axis_ver.interval =Math.ceil((axis_ver.maximum )/6);
			}
		
			//ㄴㄴ
			private function addLabelsToColumn(lst:String, val:Number):void{
					var lbl:Label = new Label();
					lbl.text =val + "";
					lbl.setActualSize(lbl.getExplicitOrMeasuredWidth(),lbl.getExplicitOrMeasuredHeight());	
					lbl.width = 40; lbl.height = 20;
					lbl.setStyle("fontSize","11");
					lbl.setStyle("fontWeight","bold");
					lbl.setStyle("textAlign","center");
					canvas.addDataChild(lbl, new CartesianCanvasValue(lst,-(lbl.width / 2)), new CartesianCanvasValue(val + Math.ceil(axis_ver.interval*0.6),0));
			}
			
			private function defineVerAxisLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
				if(axis_ver.computedMaximum==cat ){ //|| cat > axis_ver.computedMaximum-axis_ver.interval
					trace("  axisLabelMaxVal == computedMaximum  " + cat)
					return "cm";
				}
				trace("[linearAxis::compoutedMaximum]  " + axis_ver.computedMaximum)
				trace("[linearAxis::labelItem]  " + cat)
				return cat+"";
			}
  			
	
	  		public function set00UTC_gridLines(isOddNum:Boolean,is279hrs:Boolean=false):void{
				if(isOddNum){
					var bgImg:Object = (is279hrs)? new UTC00_bg_279hrs_even() : new UTC00_bg_even() ;
				}else{
					var bgImg:Object = (is279hrs)? new UTC00_bg_279hrs() : new UTC00_bg() ;
				}
				
				bgImg.alpha = .9;	
				gridLine.setStyle("direction","horizontal");
				gridLine.setStyle("verticalTickAligned",true);
      			gridLine.setStyle("horizontalStroke",ChartStyleAssets.glStroke_h2);
				this.backgroundElements=[bgImg,gridLine];
			}
  			
  			public function set12UTC_gridLines(isOddNum:Boolean=false, is279hrs:Boolean=false):void{
  				
      			gridLine.setStyle("horizontalStroke",ChartStyleAssets.glStroke_h);
      			
  				var sc_white:SolidColor = new SolidColor(0xFFFFFF,0.6);
				var sc_gray:SolidColor = new SolidColor(0xe4e4e4,0.6);
				gridLine.setStyle("direction","both");
				gridLine.setStyle("verticalFill",(isOddNum)? sc_white:sc_gray);
				gridLine.setStyle("verticalAlternateFill",(isOddNum)? sc_gray:sc_white);
				gridLine.setStyle("verticalChangeCount",2);
				gridLine.setStyle("verticalTickAligned",true);
				gridLine.setStyle("verticalStroke",ChartStyleAssets.glStroke_v2); 
  				var bgImg:Object = (is279hrs)? new UTC12_bg_dashed() : new UTC12_bg_ecmwf();
				this.backgroundElements=[gridLine,bgImg];
			}
//			public function defineLabel(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
//				if(cat.toString().length > 4){
//					return cat.toString().substring(0,2)+"/"+cat.toString().substring(2,4);
//			    }else{
//			    	if(Number(cat.toString().substring(2,4))%6 !=0){
//						return '';
//					}
//			    }
//			    // Return the customized categoryField value:
//			    return cat+"";
//			}
			
			public function defineLabel(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
				var itm:XML = this.dataProvider[this.dataProvider.length-1];
				if(cat.toString().length > 4){
					if(itm.@lst==cat){
//						Alert.show(cat.toString());
						return null;
					}else{
						return cat.toString().substring(0,2)+"."+cat.toString().substring(2,4);
					}
			    }else{
			    	if(Number(cat.toString().substring(2,4))%6 !=0){
						return '';
					}
			    }
			    // Return the customized categoryField value:
			    return cat+"";
			}
			
			
			
			public function defineLabel_00UTC(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
					var itm:XML = this.dataProvider[this.dataProvider.length-1]; //00UTC일 경우 젤 마지막 레이블 튀어나와서 걍 짤랐심ㅠ 꼼수여
					if(itm.@lst==cat){
						return null;
					}else if(cat.toString().substring(4)=="00"){
						return null;
					}else{
						return cat.toString().substring(0,2)+"."+cat.toString().substring(2,4);
					}
			}
  			
  			public function moveAxisLabel():void{
				trace('calllater:: moveAxisLabel')
				topAxisRenderer.move(topAxisRenderer.x-7,topAxisRenderer.y);
				bottomAxisRenderer.move(bottomAxisRenderer.x-7,bottomAxisRenderer.y);
			}
  			
		]]>
	</mx:Script>
		

		<!-- cartesianDataCanvas -->
		<mx:annotationElements>
			<mx:CartesianDataCanvas id="canvas" includeInRanges="true"/>
		</mx:annotationElements>
		
		<!-- GridLines.verticalTickAligned = false  -->
		
        
        
     <mx:backgroundElements>
            <mx:GridLines  id="gridLine" 
            	/>
        </mx:backgroundElements>
        
        
        
        <!-- axis renderering -->
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer placement="left" 
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"   
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/> 
			<mx:AxisRenderer placement="right" 
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"  
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/>
		</mx:verticalAxisRenderers>
		<mx:horizontalAxisRenderers>
		<!--color="0x555555"-->
			<mx:AxisRenderer id="topAxisRenderer" 
				showLabels="false" 
           		placement="top" 
               	canDropLabels="true"
            	tickPlacement="none" 
            	minorTickPlacement="none"   
            	fontSize="17"  fontWeight="bold"
				axisStroke="{ChartStyleAssets.invisibleAxis}"  
	           	axis="{axis_hor}"
				labelAlign="right" 
	           	/>
			<mx:AxisRenderer id="topAxisRenderer2"
				showLabels="false" 
				canDropLabels="true"
           		placement="top" 
            	tickPlacement="none" 
            	minorTickPlacement="none"   
				axisStroke="{ChartStyleAssets.axisStroke}" labelGap="-10"  
	           	axis="{axis_hor}"
	           	/>
			<mx:AxisRenderer id="bottomAxisRenderer"
				showLabels="false"
           		placement="bottom" 
                canDropLabels="true"
                tickPlacement="none" 
            	minorTickPlacement="none"  
            	fontSize="17" fontWeight="bold" 
				axisStroke="{ChartStyleAssets.invisibleAxis}"
           		axis="{axis_hor}"
				labelAlign="right"
           		/>
			<mx:AxisRenderer id="bottomAxisRenderer2"
				showLabels="false"
           		placement="bottom"  
                canDropLabels="true"
                tickPlacement="none" 
            	minorTickPlacement="none"  
            	fontSize="17" fontWeight="bold" 
				axisStroke="{ChartStyleAssets.axisStroke}" labelGap="-10"
           		axis="{axis_hor}"
				labelAlign="right"
           		/>
		</mx:horizontalAxisRenderers>
		
		<mx:horizontalAxis>
			<mx:CategoryAxis id="axis_hor" categoryField="@lst"  labelFunction="defineLabel"/>
		</mx:horizontalAxis> 
		<mx:verticalAxis>
			<mx:LinearAxis id="axis_ver" baseAtZero="true"  labelFunction="defineVerAxisLabel"
			/><!--labelFunction="defineVerAxisLabel"-->
		</mx:verticalAxis>
		
		<!--drop the columnSeries shadow..-->
		<mx:seriesFilters>
			<mx:Array/>
		</mx:seriesFilters>
		
		<mx:series>
			<mx:ColumnSeries id="colSeries" 
				xField="@lst" yField="@val" itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.SnowBar" >
				<!--
				<mx:stroke>
                    <mx:Stroke color="black" weight="1" alpha="0.9" />
                </mx:stroke>
                <mx:fill>
                	<mx:LinearGradient angle="90">
                        <mx:entries>
                            <mx:Array>
	                            <mx:GradientEntry color="0xBBBBBB"
	                                        ratio="0.0"
	                                        alpha="1.0" />
	                            <mx:GradientEntry color="0xFFFFFF" 
	                                        ratio="0.7"
	                                        alpha="1.0" />
                            </mx:Array>
                        </mx:entries>
                	</mx:LinearGradient>
                </mx:fill>
				-->
			</mx:ColumnSeries>	  
		</mx:series>
	</mx:ColumnChart>
