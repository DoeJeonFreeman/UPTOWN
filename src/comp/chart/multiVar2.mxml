<?xml version="1.0" encoding="utf-8"?>
<mx:CartesianChart xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="200" 
	gutterLeft="35" gutterRight="70"
	initialize="initTempChart()"
	showDataTips="true" 
	creationComplete="addGraphicSymbol()"
	>
	
	<mx:Script>
		<![CDATA[
			import asset.DFS.STN_NPPM.meteogram.itmRenerer.LineSeriesLabel;
			import comp.chart.graphic.WindSymbol;
			import mx.controls.TextInput;
			import mx.core.UITextField;
			import comp.chart.chartingTool.BGLabel;
			import mx.events.IndexChangedEvent;
			import mx.graphics.RoundedRectangle;
			import mx.core.UIComponent;
			import mx.controls.Alert;
			import mx.charts.renderers.CircleItemRenderer;
			import mx.graphics.Stroke;
			import mx.charts.chartClasses.CartesianCanvasValue;
			import mx.charts.chartClasses.CartesianDataCanvas;
			import asset.DFS.STN_NPPM.meteogram.style.ChartStyleAssets;
			import mx.controls.Label;
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			import mx.graphics.Stroke;
			import mx.charts.chartClasses.CartesianCanvasValue;
			import mx.controls.Image;
			import asset.DFS.STN_NPPM.meteogram.style.ChartStyleAssets;
			
     		[Embed(source='asset/DFS/STN_NPPM/meteogram/symbol/chanceRain_shower.png')] private var rain:Class;
     		[Embed(source='asset/DFS/STN_NPPM/meteogram/symbol/chanceSnow.png')] private var snow:Class;
     		[Embed(source='asset/DFS/STN_NPPM/meteogram/symbol/sleet.png')] private var sleet:Class;
			
			
			[Embed (source = "/asset/DFS/STN_NPPM/meteogram/style/12UTC_PTY.gif")] 
			public var UTC12_bg:Class;
			
			private function addPTYSymbol():void{
			   	if(ptyLine.dataProvider != null){
					for each(var item:Object in ptyLine.dataProvider){
						var n:String = item.val;
						var s:String = item.lst;
						var symbolImg:Image = new Image();
                  		symbolImg.width = 30;
                  		symbolImg.height = 30;
                  		switch(n){
							case "0.0" : continue; break;
							case "1.0" : symbolImg.source = rain; break;
							case "2.0" : symbolImg.source = snow; break;
							case "3.0" : symbolImg.source = sleet; break;
						}
             	       canvas.addDataChild(symbolImg, new CartesianCanvasValue(s,-(symbolImg.width / 2)), new CartesianCanvasValue(38+0.4, 0)); // 
					}
				}
        	}
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			
			private function addGraphicSymbol():void{
				addPTYSymbol();
			}
			
			
			private function initTempChart():void{
				t3hLine.setStyle("lineStroke", new Stroke(0xFB5318, 1, 1)); 
			 	t3hLine.setStyle("stroke", new Stroke(0xFB5318, 2, 0.7 ));  //circleitem line color
//             	t3hLine.setStyle("fill", 0xFFFFFF); 					//circleitem fill color
//             	t3hLine.setStyle("radius", 3); 
//             	t3hLine.setStyle("adjustedRadius", 2); 
//             	t3hLine.setStyle("itemRenderer", new ClassFactory(CircleItemRenderer)); 

             	
//             	callLater(addMinMaxLable_N_adjustAxisRange);
             	
			}
				

//			private function addMinMaxLable_N_adjustAxisRange():void{
//				axis_left.setStyle("showLabels",true);
//				axis_right.setStyle("showLabels",true);
//			}
		
//		
			//params lst:String, val:Number, minMaxFlag:String, minMaxVal:Number
//			private function addLabelsToColumn(...params):void{
//				
//			}

			
			private function defineVerAxisLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
				if(axis_ver.computedMaximum==cat || cat > axis_ver.computedMaximum-axis_ver.interval){
					return "℃"; 
				}
				return cat+"";
			}
			
			private function defineVerticalLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
				var str:String = (cat=="125") ?  "%" : cat+"";
				if(cat=="150"){
					str="";
				}
				return str;
  			}
  			
  			
			private function defineVerticalLabel4mMetres(cat:Object, pcat:Object,ax:LinearAxis):String {
				
				var str:String = (cat=="15") ?  "mm"+"&#13;"+"(cm)" : cat+"";
				return str;
			}
  			
  			
  			
  			
        	
        	
         private function getWindDirectionStr(wd:int):String{
      	 	var wdStr:String;
      	 	
       		if(11.25 <= wd && wd < 33.75){
				wdStr = "NNE";	
			}else if(33.75 <= wd && wd < 56.25){
				wdStr = "NE";
			}else if(56.25 <= wd && wd < 78.75){
				wdStr = "ENE";
			}else if(78.75 <= wd && wd < 101.25){
				wdStr = "E";
			}else if(101.25 <= wd && wd < 123.75){
				wdStr = "ESE";
			}else if(123.75 <= wd && wd < 146.25){
				wdStr = "SE";
			}else if(146.25 <= wd && wd < 168.75){
				wdStr = "SSE";
			}else if(168.75 <= wd && wd < 191.25){
				wdStr = "S";
			}else if(191.25 <= wd && wd < 213.75){
				wdStr = "SSW";
			}else if(213.75 <= wd && wd < 236.25){
				wdStr = "SW";
			}else if(236.25 <= wd && wd < 258.75){
				wdStr = "WSW";
			}else if(258.75 <= wd && wd < 281.25){
				wdStr = "W";
			}else if(281.25 <= wd && wd < 303.75){
				wdStr = "WNW";
			}else if(303.75 <= wd && wd < 326.25){
				wdStr = "NW";
			}else if(326.25 <= wd && wd < 348.75){
				wdStr = "NNW";
			}else if((348.75 <= wd && wd <= 360) || (0 <= wd && wd < 11.25)){
				wdStr = "N";
			}
	     	
	     	return wdStr; 
       } 		
        	
       private function getwindSpeedUnitLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
	 	 		return "m/s";
  			} 	
  			
  			
  			
  			
  		private function addMinMaxLable_N_adjustAxisRange():void{
				
				
				var count:int = 1;
				if(t3hLine.dataProvider != null){
					for each(var item:Object in t3hLine.dataProvider){
//				if(this.dataProvider != null){
//					for each(var item:XML in this.dataProvider){
						if(item.hasOwnProperty("max")){
							//date of issue HH==12 이면 마지막 맥스값은 표출  X
							if(count<21){
								addLabelsToColumn(item["lst"], item["val"], "max", item["max"]);
							}
							addLabelsToColumn(item["lst"], item["val"]);
						}else if(item.hasOwnProperty("min")){
							addLabelsToColumn(item["lst"], item["val"], "min", item["min"]);
						}else{
							addLabelsToColumn(item["lst"], item["val"]);
						}
						count++;
					}
				}
				axis_ver.maximum = Math.round(axis_ver.maximum) + Math.ceil((axis_ver.maximum - axis_ver.minimum ) * 0.5 );
				axis_ver.interval = Math.ceil((axis_ver.computedMaximum - axis_ver.computedMinimum)/5);
				if(axis_ver.maximum % axis_ver.interval !=0){
					axis_ver.computedMaximum += (axis_ver.maximum % axis_ver.interval);
				}	
//				lineSeries.visible = true;
				axis_left.setStyle("showLabels",true);
				axis_right.setStyle("showLabels",true);
			}
		
//		
			//params lst:String, val:Number, minMaxFlag:String, minMaxVal:Number
			private function addLabelsToColumn(...params):void{
				var lst:String = params[0];
				var val:Number = params[1];					
				var lbl:Label = new Label();
				lbl.width = 40; lbl.height = 20;
				lbl.setStyle("fontSize","11");
				lbl.setStyle("textAlign","center");
				lbl.setStyle("paddingTop",-25);
				lbl.text =val + "";
				lbl.setActualSize(lbl.getExplicitOrMeasuredWidth(),lbl.getExplicitOrMeasuredHeight());	
				canvas.addDataChild(lbl, new CartesianCanvasValue(lst,-(lbl.width / 2)), val);
				
				if(params.length > 2){ // ㅣlegnth==4
					var _minMax:TextField = new TextField();
					var flag:String = params[2];
					var minMaxVal:String = params[3];
					var textColor:uint = (flag=="max")? 0xFF0000 : 0x0055EE;
					_minMax.text = minMaxVal;
					_minMax.textColor = textColor;
					_minMax.autoSize = TextFieldAutoSize.CENTER;
					var tfStyle:TextFormat = new TextFormat(); 
					tfStyle.size = 11;
					tfStyle.bold = true;
					tfStyle.font = "Verdana";
					_minMax.setTextFormat(tfStyle);
					
					_minMax.x = 0; 
					_minMax.y = 0;
					
					var mySprite:Sprite = new Sprite();
					mySprite.graphics.lineStyle(1,0x000000,1);
					mySprite.graphics.beginFill(0xFFFFFF,1.0);
					mySprite.graphics.drawRect(0,0,_minMax.width,_minMax.height);
					
					mySprite.y = -45;
					
					mySprite.addChild(_minMax);
					var uic:UIComponent = new UIComponent();
					uic.addChild(mySprite); 
					
					canvas.addDataChild(uic, new CartesianCanvasValue(lst,-(mySprite.width / 2)), val);
					
				}
			}	
  			
		]]>
	</mx:Script>
		<!--doesn't work ㅡ,.ㅡ-->
		<!--
		<mx:Style>
			TextField{
				padding-top: -40;
			}
		</mx:Style>
		-->
		<mx:LinearAxis id="axis_ver_percentage" 
				minimum="0" 
				maximum="150" 
				interval="25" 
				labelFunction="defineVerticalLabel"/>
				
		<mx:LinearAxis id="axis_ver_mMetres" 
				minimum="0" 
				maximum="15"
				interval="5" 
				labelFunction="defineVerticalLabel4mMetres"
				/>
		<!-- cartesianDataCanvas -->
		<mx:annotationElements>
			<mx:CartesianDataCanvas id="canvas" includeInRanges="true"/>
		</mx:annotationElements>
		
		<!-- GridLines.verticalTickAligned = false  -->
		<mx:backgroundElements>
            <mx:GridLines 
            	direction="both" 
            	verticalTickAligned="true" 
            	verticalStroke="{ChartStyleAssets.glStroke_v}" 
            	horizontalStroke="{ChartStyleAssets.glStroke_h}" 
            	/>
            	
        </mx:backgroundElements>
        
        <!-- axis renderering -->
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer id="axis_left"
				placement="left" 
				showLabels="true"
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"   
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/> 
			<mx:AxisRenderer id="axis_right2"
				placement="right" 
				showLabels="true"
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver_mMetres}"  
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/>
			<mx:AxisRenderer id="axis_right"
				placement="right" 
				showLabels="true"
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver_percentage}"  
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/>
		</mx:verticalAxisRenderers>
		<mx:horizontalAxisRenderers>
		<!--color="0x555555"-->
			<mx:AxisRenderer id="topAxisRenderer"
				showLabels="false"
           		placement="top" 
               	canDropLabels="true"
            	tickPlacement="none"    
            	minorTickPlacement="none"   
            	fontSize="17" fontWeight="bold"  
				axisStroke="{ChartStyleAssets.axisStroke}"
	           	axis="{axis_hor}" />
			<mx:AxisRenderer id="bottomAxisRenderer"
				showLabels="false"
           		placement="bottom" 
                canDropLabels="true"
                tickPlacement="none" 
            	minorTickPlacement="none"  
            	fontSize="17" fontWeight="bold" 
				axisStroke="{ChartStyleAssets.axisStroke}"
           		axis="{axis_hor}"/>
		</mx:horizontalAxisRenderers>
		
		<mx:horizontalAxis>
			<mx:CategoryAxis id="axis_hor" categoryField="lst"  />
		</mx:horizontalAxis> 
		
		<mx:verticalAxis> 
			<!-- baseAtZero ㅠㅠ the default value is true .If all axis values are positive, the minimum axis value is zero.-->
			<mx:LinearAxis id="axis_ver"  baseAtZero="false" labelFunction="defineVerAxisLabel" maximum="40"/> <!--alignLabelsToInterval="true"  labelFunction="defineVerAxisLabel"-->
		</mx:verticalAxis>
		
		<!--drop shadow on a lineSeries-->
		<mx:seriesFilters>
			<mx:Array/>
		</mx:seriesFilters>		

		
		<mx:series>
						<!--
						<mx:AreaSeries id="rn3Column" horizontalAxis="{axis_hor}" verticalAxis="{axis_ver_mMetres}" areaStroke="{ChartStyleAssets.areaStroke_blue}" areaFill="{ChartStyleAssets.areaFill_blue}"
								yField="val" xField="lst" displayName="3HrsRain" form="step">
						</mx:AreaSeries>
						<mx:AreaSeries id="sn3Column" horizontalAxis="{axis_hor}" verticalAxis="{axis_ver_mMetres}" areaStroke="{ChartStyleAssets.areaStroke_yellow}" areaFill="{ChartStyleAssets.areaFill_yellow}"
								yField="val" xField="lst" displayName="3HrsSnow" form="step">
						</mx:AreaSeries>
						-->
			<!--			
			<mx:LineSeries id="rehColumn" horizontalAxis="{axis_hor}" verticalAxis="{axis_ver_percentage}"
				yField="val" displayName="REH" 
				form="segment" visible="true" > 
			</mx:LineSeries>		
			-->	
				<mx:ColumnSet type="clustered" columnWidthRatio=".8" >
					<mx:series>
						<mx:ColumnSeries id="rn3Column" horizontalAxis="{axis_hor}" verticalAxis="{axis_ver_mMetres}" 
								yField="val" xField="lst" displayName="3HrsRain" itemRenderer="asset.DFS.STN_NPPM.meteogram.itmRenerer.RainBar">
						</mx:ColumnSeries>
						<mx:ColumnSeries id="sn3Column" horizontalAxis="{axis_hor}" verticalAxis="{axis_ver_mMetres}" 
								yField="val" xField="lst" displayName="3HrsSnow" itemRenderer="asset.DFS.STN_NPPM.meteogram.itmRenerer.SnowBar">
						</mx:ColumnSeries>
					</mx:series>
				</mx:ColumnSet>	
		
				<mx:ColumnSet type="overlaid" columnWidthRatio=".5">
				<!--
                 -->       
						<mx:ColumnSeries id="rehColumn" horizontalAxis="{axis_hor}" verticalAxis="{axis_ver_percentage}" 
								yField="val" displayName="Humidity" >
								<mx:stroke>
				                    <mx:Stroke color="0x777777" weight="1" alpha="0.3" />
				                </mx:stroke>
				                 <mx:fill> 
				                	<mx:LinearGradient angle="90">
				                        <mx:entries>
				                            <mx:Array>
				                                <mx:GradientEntry color="0x97CD2D"  
				                                        ratio="0.0"
				                                        alpha=".8" />
				                                <mx:GradientEntry color="0xFFECA6" 
				                                        ratio="1.0"
				                                        alpha="0.8" />    <!--0xFFECA6-->
				                            </mx:Array>
				                        </mx:entries>
				                	</mx:LinearGradient>
				                </mx:fill>
							</mx:ColumnSeries>
							
							<mx:ColumnSeries id="popColumn" horizontalAxis="{axis_hor}" verticalAxis="{axis_ver_percentage}" itemRenderer="asset.DFS.STN_NPPM.meteogram.itmRenerer.POPBar"
								yField="val" displayName="POPrecipitaion">  <!--itemRenderer="asset.DFS.STN_NPPM.meteogram.itmRenerer.POPBar"--> 
								<mx:stroke>
				                    <mx:Stroke color="0x000000" weight="1" alpha="0.2" />
				                </mx:stroke>
				                <mx:fill><!--0x84E130-->
				                	<mx:LinearGradient angle="90">
				                        <mx:entries>
				                            <mx:Array>
				                                <mx:GradientEntry color="0x33BBFF"
				                                        ratio="1.0"
				                                        alpha="0.9" />
				                                <mx:GradientEntry color="0x3399FF" 
				                                        ratio="1.0"
				                                        alpha="0.8" />
				                            </mx:Array>
				                        </mx:entries>
				                	</mx:LinearGradient>
				                </mx:fill>
							</mx:ColumnSeries>
				</mx:ColumnSet>
			
			<mx:LineSeries id="t3hLine" horizontalAxis="{axis_hor}" verticalAxis="{axis_ver}"
				yField="val" displayName="Temperature" 
				form="segment" visible="true" itemRenderer="asset.DFS.STN_NPPM.meteogram.itmRenerer.LineSeriesLabel"> 
				<!--itemRenderer="asset.DFS.STN_NPPM.meteogram.itmRenerer.LineSeriesLabel"-->
				<!--itemRenderer="asset.DFS.STN_NPPM.meteogram.itmRenerer.LabeledRenderer2"-->
			</mx:LineSeries>
			
			<mx:ColumnSeries id="ptyLine" horizontalAxis="{axis_hor}" verticalAxis="{axis_ver}"
				yField="val" xField="lst" displayName="Precipitation" 
				visible="false" includeInLayout="false"/> 
			
		</mx:series>
		
	</mx:CartesianChart>
