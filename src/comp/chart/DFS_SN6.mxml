<?xml version="1.0" encoding="utf-8"?>
<mx:AreaChart xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="150" 
	gutterLeft="30" gutterRight="30"
	visible="true" 
	initialize="init()">
	
	<mx:Script>
		<![CDATA[
			import mx.formatters.NumberFormatter;
			import mx.controls.Alert;
			import mx.charts.chartClasses.CartesianCanvasValue;
			import mx.charts.chartClasses.CartesianDataCanvas;
			import asset.DFS.timeSeries.meteogram.style.ChartStyleAssets;
			import mx.controls.Label;
			import mx.graphics.SolidColor;
			import mx.graphics.Stroke;
			
			
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/SHRT_00UTC_odd.png')] private var bg_00UTC_odd:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/SHRT_00UTC_even.png')] private var bg_00UTC_even:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/SHRT_12UTC_odd.png')] private var bg_12UTC_odd:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/SHRT_12UTC_even.png')] private var bg_12UTC_even:Class;
			
			
			private function getProperBG(is00UTC:Boolean, isOdd:Boolean):Object{
				if(isOdd){
					if(is00UTC){
						return new bg_00UTC_odd();						
					}else{
						return new bg_12UTC_odd();						
					}
				}else{
					if(is00UTC){
						return new bg_00UTC_even();						
					}else{
						return new bg_12UTC_even();						
					}
				}	
			}
			public function setAlternateFill(is00UTC:Boolean, isOdd:Boolean):void{
				var bgImg:Object = getProperBG(is00UTC, isOdd);
				bgImg.alpha = 1.0
				var gridLine:GridLines = new GridLines();
				gridLine.setStyle("direction","both");
				gridLine.setStyle("verticalTickAligned",false);
      			gridLine.setStyle("verticalStroke",ChartStyleAssets.glStroke_v);
      			gridLine.setStyle("horizontalStroke",ChartStyleAssets.glStroke_v);
				this.backgroundElements=[bgImg,gridLine];
			}
			
			
			
			
			
//			private var fractionFormatter:NumberFormatter;
			private function init():void{
//				fractionFormatter = new NumberFormatter();
//				fractionFormatter.precision = 1;
				callLater(resetLinearAxisData);
//				resetLinearAxisData();
			}
			
			private function resetLinearAxisData():void{
//				axis_ver.maximum += Math.ceil(axis_ver.computedMaximum * 0.2);
//				if(axis_ver.maximum > 6){
//					axis_ver.interval =Math.ceil((axis_ver.maximum )/6);
//				}else{
//					axis_ver.interval = axis_ver.maximum / 6;
//				}
				addAnnotationElements();
//				this.validateNow();
			}
			
			
			private function addAnnotationElements():void{
				var isFirst:Boolean = true;
				if(this.dataProvider != null){
					for each(var item:Object in this.dataProvider){
						if(isFirst){
							isFirst = false;
						}else{
							addLabelsToColumn(item.lst, item.val);
						}
					}
				}
				//모든 데이터가 0일 때 자동으로 컴퓨티드 맥심엄 100으로 잡힘 ㅡ,.ㅡ 어케함?
//				if( axis_ver.maximum < 10 ){ //|| axis_ver.computedMaximum==100
//					axis_ver.maximum = 10; 
//				}
//				axis_ver.maximum += Math.ceil(axis_ver.computedMaximum * 0.2);
//				axis_ver.interval =Math.ceil((axis_ver.maximum )/6);
			}
		
			//ㄴㄴ
			private function addLabelsToColumn(lst:String, val:Number):void{
					var formatter:NumberFormatter = new NumberFormatter();
					formatter.precision = 1;
					
					var lbl:Label = new Label();
					lbl.text =formatter.format(val) + "";
					lbl.setActualSize(lbl.getExplicitOrMeasuredWidth(),lbl.getExplicitOrMeasuredHeight());	
					lbl.width = 40; lbl.height = 20;
					lbl.setStyle("fontSize","12");
					lbl.setStyle("fontWeight","normal");
					lbl.setStyle("textAlign","center");
					lbl.setStyle("paddingTop",-20);
					canvas.addDataChild(lbl, new CartesianCanvasValue(lst,-(lbl.width / 2)), val );
			}
			
			private function defineVerAxisLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
				if(axis_ver.computedMaximum==cat ){ //|| cat > axis_ver.computedMaximum-axis_ver.interval
//					trace("  axisLabelMaxVal == computedMaximum  " + cat)
					return "cm";
				}
//				trace("[linearAxis::compoutedMaximum]  " + axis_ver.computedMaximum)
//				tarace("[linearAxis::labelItem]  " + cat)
				return cat+"";
//				return fractionFormatter.format(cat);
			}
  			
			private function horLabelFunc(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
				// Return the customized categoryField value:
				var lbl_LST:String = cat.toString();
				if(cat.toString().length == 4){
					if(Number(cat.toString().substring(2,4))%6 !=0){
						lbl_LST= '';
					}
				} 
				return lbl_LST;
			}
  			
  			
		]]>
	</mx:Script>
		

		<!-- cartesianDataCanvas -->
		<mx:annotationElements>
			<mx:CartesianDataCanvas id="canvas" includeInRanges="true"/>
		</mx:annotationElements>
		
		<!-- GridLines.verticalTickAligned = false  -->
		<mx:backgroundElements>
            <mx:GridLines 
            	direction="both" 
            	verticalTickAligned="false" 
            	verticalStroke="{ChartStyleAssets.glStroke_v}" 
            	horizontalStroke="{ChartStyleAssets.glStroke_h}" 
            	horizontalShowOrigin="false"
            	/>
            	
        </mx:backgroundElements>
        
        <!-- axis renderering -->
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer placement="left" 
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"   
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/> 
			<mx:AxisRenderer placement="right" 
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"  
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/>
		</mx:verticalAxisRenderers>
		<mx:horizontalAxisRenderers>
		<!--color="0x555555"-->
			<mx:AxisRenderer id="topAxisRenderer"
				showLabels="false"
           		placement="top" 
               	canDropLabels="true"
            	tickPlacement="none"    
            	minorTickPlacement="none"   
            	fontSize="17" fontWeight="bold"  
				axisStroke="{ChartStyleAssets.axisStroke}"
	           	axis="{axis_hor}" labelAlign="center"/>
			<mx:AxisRenderer id="bottomAxisRenderer"
				showLabels="false"
           		placement="bottom" 
                canDropLabels="true"
                tickPlacement="none" 
            	minorTickPlacement="none"  
            	fontSize="17" fontWeight="bold"  
				axisStroke="{ChartStyleAssets.axisStroke}"
           		axis="{axis_hor}" labelAlign="center"/>
		</mx:horizontalAxisRenderers>
		
		<mx:horizontalAxis>
			<mx:CategoryAxis id="axis_hor" categoryField="lst"  labelFunction="horLabelFunc"/>
		</mx:horizontalAxis> 
		<mx:verticalAxis>
			<mx:LinearAxis id="axis_ver" baseAtZero="true" minimum="0"  labelFunction="defineVerAxisLabel"
			/><!--labelFunction="defineVerAxisLabel"-->
		</mx:verticalAxis>
		
		<!--drop the columnSeries shadow..-->
		<mx:seriesFilters>
			<mx:Array/>
		</mx:seriesFilters>
		
		<mx:series>
		<!--
			<mx:ColumnSeries id="colSeries" 
				xField="lst" yField="val" itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.SnowBar" >
			</mx:ColumnSeries>	  
		-->
			<mx:AreaSeries id="colSeries" xField="lst" yField="val" form="reverseStep" areaFill="{new SolidColor(0xF2C450,.3)}" areaStroke="{new Stroke(0xF2C450,1, 0.5)}" />
				<!--areaStroke="{new Stroke(0xF2C450, 1, 0.4)}"   areaRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.MyAreaRenderer"-->
		<!--
			<mx:LineSeries id="colSeris" xField="lst" yField="val" interpolateValues="true"/>
		-->	
		</mx:series>
	</mx:AreaChart>
	
