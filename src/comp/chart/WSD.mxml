<?xml version="1.0" encoding="utf-8"?>
<mx:CartesianChart xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="40" 
	gutterLeft="35"  gutterRight="70"
	
	
	initialize="init()">

	<mx:Script>
		<![CDATA[
			import comp.chart.graphic.WindSymbol2_arrow;
			import mx.formatters.NumberFormatter;
			import mx.charts.chartClasses.CartesianCanvasValue;
			import mx.controls.Label;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import asset.DFS.timeSeries.meteogram.style.ChartStyleAssets;

			
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/SHRT_00UTC_odd.png')] private var bg_00UTC_odd:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/SHRT_00UTC_even.png')] private var bg_00UTC_even:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/SHRT_12UTC_odd.png')] private var bg_12UTC_odd:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/SHRT_12UTC_even.png')] private var bg_12UTC_even:Class;
			
			
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/SHRT_00UTC_odd.png')] private var bg_00UTC_odd_KWRF:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/SHRT_00UTC_even.png')] private var bg_00UTC_even_KWRF:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/SHRT_12UTC_odd.png')] private var bg_12UTC_odd_KWRF:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/SHRT_12UTC_even.png')] private var bg_12UTC_even_KWRF:Class;
			
			
			private function getProperBG(is00UTC:Boolean, isOdd:Boolean, isKWARF:Boolean=false):Object{
				if(isOdd){
					if(is00UTC){
						if(isKWARF){
							return new bg_00UTC_odd_KWRF();						
						}else{
							return new bg_00UTC_odd();						
						}
					}else{
						if(isKWARF){
							return new bg_12UTC_odd_KWRF();						
						}else{
							return new bg_12UTC_odd();						
						}	
					}
				}else{
					if(is00UTC){
						if(isKWARF){
							return new bg_00UTC_even_KWRF();						
						}else{
							return new bg_00UTC_even();						
						}	
					}else{
						if(isKWARF){
							return new bg_12UTC_even_KWRF();						
						}else{
							return new bg_12UTC_even();						
						}
					}
				}	
			}
			
			public function setAlternateFill(is00UTC:Boolean, isOdd:Boolean, isKWARF:Boolean=false):void{
				var bgImg:Object = getProperBG(is00UTC, isOdd, isKWARF);
				bgImg.alpha = 1
				var gridLine:GridLines = new GridLines();
				gridLine.setStyle("direction","vertical");
				gridLine.setStyle("verticalTickAligned",true);
      			gridLine.setStyle("verticalStroke",ChartStyleAssets.glStroke_v);
				this.backgroundElements=[bgImg,gridLine];
			}		


			private function init():void{
				callLater(drawWindSymbol);
			}
		
        	private function drawWindSymbol():void{
        		axis_ver.minimum=0; 
        		axis_ver.maximum=3;
        		axis_ver.interval=4;
				
        		if(this.dataProvider != null){
        			for each(var item:Object in this.dataProvider){
        				if(!item.hasOwnProperty("ws")){
        					continue;
        				}
						var ws:Number =  item.ws; 
						var wd:Number =  item.wd - 90;
						var lst:String = item.lst;
						
						
						var ui:UIComponent = new UIComponent();
						var windGraphic:WindSymbol2_arrow = new WindSymbol2_arrow(ws,  wd);
						ui.addChild(windGraphic);


					
						var currFormat:NumberFormatter = new NumberFormatter();
						currFormat.precision = 1;
						currFormat.rounding = "nearest";
					
					
						var lbl_speed:Label = new Label();
						lbl_speed.text = currFormat.format(ws).toString();
						lbl_speed.setStyle("fontSize",12);
//						lbl_speed.setStyle("color",0x555555);
//						lbl_speed.setStyle("paddingLeft",-10);
						lbl_speed.setStyle("textAlign","center");
   	   		           	lbl_speed.width = 38;
						lbl_speed.truncateToFit = true;
//						trace(lbl_speed.width+'   lbl_speed label width');
					
//						var lbl_d16:Label = new Label();
//						lbl_d16.text = getWindDirectionStr(item.wd);
//						lbl_d16.setStyle("fontSize",11);
//						lbl_d16.setStyle("color",0x444444);
//						lbl_d16.setStyle("fontWeight","bold");
//						lbl_d16.setStyle("textAlign","center");
//   	   		           	lbl_d16.width = 40;
//						lbl_d16.truncateToFit = true;
//     	            	lbl_d16.height = 20;
//						lbl_d16.setActualSize(lbl_d16.getExplicitOrMeasuredWidth(), lbl_d16.getExplicitOrMeasuredHeight());
						if(ws==0){
							lbl_speed.text = "정온";
							lbl_speed.width = 35;
							lbl_speed.truncateToFit =true;
							lbl_speed.setStyle("fontSize",12);
							canvas.addDataChild(lbl_speed,  new CartesianCanvasValue(lst,-(lbl_speed.width / 2)) , new CartesianCanvasValue(2,0));
							continue;
							
						}

						canvas.addDataChild(ui, lst, new CartesianCanvasValue(2,0)); //graphics
						canvas.addDataChild(lbl_speed,new CartesianCanvasValue(lst,-(lbl_speed.width / 2)) , new CartesianCanvasValue(1,0)); //speed label
//						canvas.addDataChild(lbl_d16,  new CartesianCanvasValue(lst,-(lbl_d16.width / 2)) , new CartesianCanvasValue(4.5,0)); //16 windDirection label
					}
				}
				axis_right.setStyle("showLabels",true);
        	}
        	
        	
         private function getWindDirectionStr(wd:int):String{
      	 	var wdStr:String;
      	 	
       		if(11.25 <= wd && wd < 33.75){
				wdStr = "NNE";	
			}else if(33.75 <= wd && wd < 56.25){
				wdStr = "NE";
			}else if(56.25 <= wd && wd < 78.75){
				wdStr = "ENE";
			}else if(78.75 <= wd && wd < 101.25){
				wdStr = "E";
			}else if(101.25 <= wd && wd < 123.75){
				wdStr = "ESE";
			}else if(123.75 <= wd && wd < 146.25){
				wdStr = "SE";
			}else if(146.25 <= wd && wd < 168.75){
				wdStr = "SSE";
			}else if(168.75 <= wd && wd < 191.25){
				wdStr = "S";
			}else if(191.25 <= wd && wd < 213.75){
				wdStr = "SSW";
			}else if(213.75 <= wd && wd < 236.25){
				wdStr = "SW";
			}else if(236.25 <= wd && wd < 258.75){
				wdStr = "WSW";
			}else if(258.75 <= wd && wd < 281.25){
				wdStr = "W";
			}else if(281.25 <= wd && wd < 303.75){
				wdStr = "WNW";
			}else if(303.75 <= wd && wd < 326.25){
				wdStr = "NW";
			}else if(326.25 <= wd && wd < 348.75){
				wdStr = "NNW";
			}else if((348.75 <= wd && wd <= 360) || (0 <= wd && wd < 11.25)){
				wdStr = "N";
			}
	     	
	     	return wdStr; 
       } 		
        	
       private function getwindSpeedUnitLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
	 	 		return "m/s";
  			} 	
     
     	private function horLabelFunc(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
				// Return the customized categoryField value:
				var lbl_LST:String = cat.toString();
				if(cat.toString().length > 4){
					lbl_LST= cat.toString().substring(0,2) +'/'+cat.toString().substring(2,4);
				} else{
					if(Number(cat.toString().substring(2,4))%6 !=0){
						return '';
					}	
				}
				return lbl_LST;
		}
     
  		
]]>
	</mx:Script>
	
	

	
	
		<!-- cartesianDataCanvas -->
		<mx:annotationElements>
			<mx:CartesianDataCanvas id="canvas" includeInRanges="true"/>
		</mx:annotationElements>
		
		<!-- GridLines.verticalTickAligned = false  -->
		<mx:backgroundElements>
            <mx:GridLines 
            	direction="both" 
            	verticalTickAligned="true" 
            	verticalStroke="{ChartStyleAssets.glStroke_v}" 
            	horizontalStroke="{ChartStyleAssets.glStroke_h}" 
            	/>
            	
        </mx:backgroundElements>
        
        <!-- axis renderering -->
		<!--verticalAxisTitleAlignment="flippedVertical"-->
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer placement="left" 
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"   
				showLabels="false"
				axisStroke="{ChartStyleAssets.axisStroke}"
			/> 
			<mx:AxisRenderer id="axis_right" placement="right" 
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"  
				axisStroke="{ChartStyleAssets.axisStroke}"
				showLabels="false" 
				labelAlign="top"
			/>
		</mx:verticalAxisRenderers>
		<mx:horizontalAxisRenderers>
		<!--color="0x555555"
			top	axisStroke="{ChartStyleAssets.axisStroke}"
		-->
			<mx:AxisRenderer id="topAxisRenderer"
				showLabels="false"
           		placement="top" 
               	canDropLabels="true"
            	tickPlacement="none"    
            	minorTickPlacement="none"   
            	fontSize="17" fontWeight="bold"  
				axisStroke="{ChartStyleAssets.invisibleAxis}"
	           	axis="{axis_hor}"/>
			<mx:AxisRenderer id="bottomAxisRenderer"
				showLabels="false"
           		placement="bottom" 
                canDropLabels="true"
                tickPlacement="none" 
            	minorTickPlacement="none"  
            	fontSize="17" fontWeight="bold"  
				axisStroke="{ChartStyleAssets.axisStroke}"
           		axis="{axis_hor}"/>
		</mx:horizontalAxisRenderers>
		
		<mx:horizontalAxis>
			<mx:CategoryAxis id="axis_hor" categoryField="lst"  labelFunction="horLabelFunc"/>
		</mx:horizontalAxis> 
		<mx:verticalAxis>
			<mx:LinearAxis id="axis_ver" labelFunction="getwindSpeedUnitLabel" />
		</mx:verticalAxis>
		
		<mx:series>
			<mx:LineSeries id="colSeries" 
				xField="lst" yField="ws" visible="false"
			/>
		</mx:series>
		
</mx:CartesianChart>	    	
	    	