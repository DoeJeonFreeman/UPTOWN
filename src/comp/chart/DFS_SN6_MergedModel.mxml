<?xml version="1.0" encoding="utf-8"?>
<mx:ColumnChart xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="150" 
	gutterLeft="30" gutterRight="30"
	columnWidthRatio="1.0" selectionMode="none" 
	visible="true" 
	initialize="init()" 
	showDataTips="true" dataTipFunction="dataTipFunc"  dataTipMode="multiple" 
	creationComplete="creationCompleteHandler()"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.events.ColorPickerEvent;
			import mx.charts.chartClasses.ChartElement;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.controls.ColorPicker;
			import asset.DFS.timeSeries.meteogram.itmRenerer.ColumnRenderer4MergedModel;
			import mx.charts.events.ChartItemEvent;
			import comp.util.common.CommonUtil;
			import mx.formatters.NumberFormatter;
			import mx.charts.chartClasses.Series;
			import mx.charts.HitData;
			import mx.graphics.Stroke;
			import mx.graphics.SolidColor;
			import mx.controls.Alert;
			import mx.charts.chartClasses.CartesianCanvasValue;
			import mx.charts.chartClasses.CartesianDataCanvas;
			import asset.DFS.timeSeries.meteogram.style.ChartStyleAssets;
			import mx.controls.Label;
			
			
			
			
			
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/rn3/SHRT_00UTC_odd.png')] private var bg_00UTC_odd:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/rn3/SHRT_00UTC_even.png')] private var bg_00UTC_even:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/rn3/SHRT_12UTC_odd.png')] private var bg_12UTC_odd:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/rn3/SHRT_12UTC_even.png')] private var bg_12UTC_even:Class;
			
			
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/rn3/SHRT_00UTC_odd.png')] private var bg_00UTC_odd_KWRF:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/rn3/SHRT_00UTC_even.png')] private var bg_00UTC_even_KWRF:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/rn3/SHRT_12UTC_odd.png')] private var bg_12UTC_odd_KWRF:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/rn3/SHRT_12UTC_even.png')] private var bg_12UTC_even_KWRF:Class;
			
			
			private function getProperBG(is00UTC:Boolean, isOdd:Boolean, isKWARF:Boolean=false):Object{
				if(isOdd){
					if(is00UTC){
						if(isKWARF){
							return new bg_00UTC_odd_KWRF();						
						}else{
							return new bg_00UTC_odd();						
						}
					}else{
						if(isKWARF){
							return new bg_12UTC_odd_KWRF();						
						}else{
							return new bg_12UTC_odd();						
						}	
					}
				}else{
					if(is00UTC){
						if(isKWARF){
							return new bg_00UTC_even_KWRF();						
						}else{
							return new bg_00UTC_even();						
						}	
					}else{
						if(isKWARF){
							return new bg_12UTC_even_KWRF();						
						}else{
							return new bg_12UTC_even();						
						}
					}
				}	
			}
			
			public function setAlternateFill(is00UTC:Boolean, isOdd:Boolean, isKWARF:Boolean=false):void{
				var bgImg:Object = getProperBG(is00UTC, isOdd, isKWARF);
				bgImg.alpha = 1.0
				var gridLine:GridLines = new GridLines();
				gridLine.setStyle("direction","both");
				gridLine.setStyle("verticalTickAligned",true);
      			gridLine.setStyle("verticalStroke",ChartStyleAssets.glStroke_v);
      			gridLine.setStyle("horizontalStroke",ChartStyleAssets.glStroke_v);
				this.backgroundElements=[bgImg,gridLine];
			}
			
			
			
			
			
			
			private function dataTipFunc(e:HitData):String {
		        var s:String;
		        var dateTime:String = Object(e.item).@lst;
		        s  = "<B>" + Object(e.element).displayName+'</B>\n'; 
		        s +=  dateTime.substr(0,2) + '일 ' + dateTime.substr(2,4) + '시\n'; 
		        s += "------------\n";
		        s += Object(e.item).@val + ' cm';
//		        s += "SEA:   <FONT COLOR='#3281DB'> " + e.item.sea + "</FONT>\n";
//				s += '\n'+e.item.val;
		        return s;
		     }   
			
			
			
			
			
			
			
			
			 public function itemClickHandler(e:ChartItemEvent):void {
	        	 Alert.show(e.hitData.item.@lst+' LST n VAL '+e.hitData.item.@val)
		     }
			private function init():void{
//				fractionFormatter = new NumberFormatter();
//				fractionFormatter.precision = 1;
//				callLater(resetLinearAxisData);
				this.addEventListener(ChartItemEvent.ITEM_CLICK,selectItemHandler);
			}
			
			private function creationCompleteHandler():void{
//				resetLinearAxisData();
				this.validateNow();
				moveAxisRenderer(parentApplication.isExistOnlyKWRF)
			}
			
			private function resetLinearAxisData():void{
				axis_ver.maximum += Math.ceil(axis_ver.computedMaximum * 0.2);
				if(axis_ver.maximum > 6){
					axis_ver.interval =Math.ceil((axis_ver.maximum )/6);
				}else{
					axis_ver.interval = axis_ver.maximum / 6;
				}
//				addAnnotationElements();
			}
			
			private var fractionFormatter:NumberFormatter;
			
			public function setDefaultStroke(val:Number=0.9):void{
				for each(var cs:ColumnSeries in this.series){

					var colour:int = CommonUtil.getInstance().getStrokeColourByModelName(cs.id,true,false);
					cs.setStyle("fill", new SolidColor(colour));
					cs.setStyle("alpha",val);
					cs.setStyle("stroke", new Stroke(0x000000, 0, 0));
//					cs.setStyle("itemRenderer",new ClassFactory(ColumnRenderer4MergedModel_DiscardBoarder));
//					if(cs.getStyle("itemRenderer")!=undefined){
//						cs.setStyle("itemRenderer",null);
//					}
//					cs.selectedIndices = [];
				}
			}
			
			
			public function addAnnotationElements(currSeries:Series,isVisible:Boolean):void{
				canvas.removeAllChildren();
				if(!isVisible){
					setDefaultStroke();
					return;
				}
				if(! CommonUtil.getInstance().isFileExist(parentApplication.mDictionary,currSeries.displayName)){
					setDefaultStroke();
					return;
				}
				if(currSeries.dataProvider != null){
					setDefaultStroke(0.3);
					fractionFormatter = new NumberFormatter();
					fractionFormatter.precision = 1;
					fractionFormatter.rounding = "nearest";
					
					var colour:int = CommonUtil.getInstance().getStrokeColourByModelName(currSeries.id,true,true);
					currSeries.setStyle("fill", new SolidColor(colour));
					currSeries.setStyle("alpha", 1);
					currSeries.setStyle("stroke", new Stroke(0x000000,1,1));
//					currSeries.setStyle("itemRenderer",new ClassFactory(ColumnRenderer4MergedModel));
					
					//2016-03-21 
					//SHRT 강수, 강수확률, 신적설 @val은 현재 XMLOutputter에서 미싱처리함.
					//근데 체크박스 BEST 선택시 레이블이 0으로 초기화됨. 
					//안나오는게 정상이여ㅠ
					
//					if(currSeries.id.indexOf("best")!=-1)return;
					
					for each(var item:XML in currSeries.dataProvider){
						if(item.hasOwnProperty("@val")){ // 2016-03-21
							addLabelsToColumn(item["@lst"], item["@val"]);
						}
					}

				}
			}
		
			//ㄴㄴ
			private function addLabelsToColumn(lst:String, val:Number):void{
					var lbl:Label = new Label();
//					lbl.text =val + "";
					lbl.text =fractionFormatter.format(val);
					lbl.setActualSize(lbl.getExplicitOrMeasuredWidth(),lbl.getExplicitOrMeasuredHeight());	
					lbl.width = 40; lbl.height = 20;
					lbl.setStyle("fontSize","12");
					lbl.setStyle("fontWeight","normal");
					lbl.setStyle("paddingTop",-20);
					lbl.setStyle("textAlign","center");
//					canvas.addDataChild(lbl, new CartesianCanvasValue(lst,-(lbl.width / 2)), new CartesianCanvasValue(val + Math.ceil(axis_ver.interval*0.6),0));
					canvas.addDataChild(lbl, new CartesianCanvasValue(lst,-(lbl.width / 2)), val);
			}
			
			
			private function defineVerAxisLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
				if(axis_ver.computedMaximum==cat ){ //|| cat > axis_ver.computedMaximum-axis_ver.interval
					return "cm";
				}
				return cat+"";
//				return fractionFormatter.format(cat);
			}
  			
  			
			private function horLabelFunc(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
				var lbl_LST:String = cat.toString();
				if(cat.toString().length == 4){
					if(Number(cat.toString().substring(2,4))%6 !=0){
						lbl_LST= '';
					}
				} 
				return lbl_LST;
			}
  			
  			
  			
 			public function moveAxisRenderer(isKWRF:Boolean):void{
				if(!isKWRF){
					moveAxisLabel();
				}else{
					trace('chart is KWARF_SHRT:: '+isKWRF.toString())
				}
			} 			
  			
  			
  			public function moveAxisLabel():void{
				trace('calllater:: moveAxisLabel')
				topAxisRenderer.move(topAxisRenderer.x+8,topAxisRenderer.y);
				bottomAxisRenderer.move(bottomAxisRenderer.x+8,bottomAxisRenderer.y);
			}
			
			
			////////////////////////////////////// changing series colour at run time with a ColorPicker..
			////////////////////////////////////// changing series colour at run time with a ColorPicker..
			private var cp:ColorPicker;
		    private var csi:ColumnSeriesItem;
		    private var el:ChartElement;
		    
		    private function selectItemHandler(e:ChartItemEvent):void {
				var hitData:HitData = e.hitData;
		        csi = ColumnSeriesItem(hitData.chartItem);
		        el = ChartElement(csi.element);
		        
		        cp = new ColorPicker();
		        this.addChild(cp);
		        cp.addEventListener(ColorPickerEvent.CHANGE, changeItemColor);
		        cp.x = e.localX;
		        cp.y = e.localY;
		        cp.open();
		    }
			
		    private function changeItemColor(e:ColorPickerEvent):void {
				var c:SolidColor = new SolidColor(cp.selectedColor);		
				el.setStyle("fill", c);
		    	this.removeChild(cp);
		    }
			////////////////////////////////////// changing series colour at run time with a ColorPicker..
			////////////////////////////////////// changing series colour at run time with a ColorPicker..
			
			
		]]>
	</mx:Script>
		

		<!-- cartesianDataCanvas -->
		<mx:annotationElements>
			<mx:CartesianDataCanvas id="canvas" includeInRanges="true"/>
		</mx:annotationElements>
		
		<!-- GridLines.verticalTickAligned = false  -->
		<mx:backgroundElements>
            <mx:GridLines 
            	direction="both" 
            	verticalTickAligned="true" 
            	verticalStroke="{ChartStyleAssets.glStroke_v}" 
            	horizontalStroke="{ChartStyleAssets.glStroke_h}" 
            	/>
            	
        </mx:backgroundElements>
        
        <!-- axis renderering -->
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer placement="left" 
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"   
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/> 
			<mx:AxisRenderer placement="right" 
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"  
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/>
		</mx:verticalAxisRenderers>
		<mx:horizontalAxisRenderers>
		<!--color="0x555555"-->
			<mx:AxisRenderer id="topAxisRenderer" 
				showLabels="false" 
           		placement="top" 
               	canDropLabels="true"
            	tickPlacement="none" 
            	minorTickPlacement="none"   
            	fontSize="17"  fontWeight="bold"
				axisStroke="{ChartStyleAssets.invisibleAxis}"  
	           	axis="{axis_hor}"
				labelAlign="right" 
	           	/>
			<mx:AxisRenderer id="topAxisRenderer2"
				showLabels="false" 
           		placement="top" 
            	tickPlacement="none" 
            	minorTickPlacement="none"   
				axisStroke="{ChartStyleAssets.axisStroke}" labelGap="-10"  
	           	axis="{axis_hor}"
	           	/>
			<mx:AxisRenderer id="bottomAxisRenderer"
				showLabels="false"
           		placement="bottom" 
                canDropLabels="true"
                tickPlacement="none" 
            	minorTickPlacement="none"  
            	fontSize="17" fontWeight="bold" 
				axisStroke="{ChartStyleAssets.invisibleAxis}"
           		axis="{axis_hor}"
				labelAlign="right"
           		/>
			<mx:AxisRenderer id="bottomAxisRenderer2"
				showLabels="false"
           		placement="bottom"  
                canDropLabels="true"
                tickPlacement="none" 
            	minorTickPlacement="none"  
            	fontSize="17" fontWeight="bold" 
				axisStroke="{ChartStyleAssets.axisStroke}" labelGap="-10"
           		axis="{axis_hor}"
				labelAlign="right"
           		/>
		</mx:horizontalAxisRenderers>
		
		<mx:horizontalAxis>
			<mx:CategoryAxis id="axis_hor" categoryField="@lst"  labelFunction="horLabelFunc"/>
		</mx:horizontalAxis> 
		<mx:verticalAxis>
			<mx:LinearAxis id="axis_ver" baseAtZero="true" minimum="0"  labelFunction="defineVerAxisLabel"
			/><!--labelFunction="defineVerAxisLabel"-->
		</mx:verticalAxis>
		
		<!--drop the columnSeries shadow..
		-->
		<mx:seriesFilters>
			<mx:Array/>
		</mx:seriesFilters>
		
		<mx:series>
		
		
				
				<mx:ColumnSeries id="series_best" itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.ColumnRenderer4MergedModel"
					xField="@lst" yField="@val" displayName="BEST">
					<mx:fill>
	                	<mx:SolidColor color="{ChartStyleAssets.SC_SHRT_KWRF.color}" />
	                </mx:fill>
	             </mx:ColumnSeries>   
			
				<mx:ColumnSeries id="series_pmos" itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.ColumnRenderer4MergedModel"
					xField="@lst" yField="@val" displayName="RDPS MOS">
					<mx:fill>
	                	<mx:SolidColor color="{ChartStyleAssets.SC_SHRT_PMOS.color}" />
	                </mx:fill>
	             </mx:ColumnSeries>   
					<!--
					fill="{new SolidColor(ChartStyleAssets.SC_SHRT_PMOS.color, 0.8)}"
					stroke="{new Stroke(0x000000,1,.2)}" 
					fill="{ChartStyleAssets.SC_SHRT_PMOS}" alpha=".7"
					-->
					
				<mx:ColumnSeries id="series_rdps" itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.ColumnRenderer4MergedModel"
					xField="@lst" yField="@val" displayName="RDPS" >
					<mx:fill>
	                	<mx:SolidColor color="{ChartStyleAssets.SC_SHRT_RDPS.color}"  />
	                </mx:fill>
				</mx:ColumnSeries>	  
					<!--
					fill="{new SolidColor(ChartStyleAssets.SC_SHRT_RDPS.color,0.8)}" 
					stroke="{new Stroke(0x000000,1,.2)}" 
					fill="{new SolidColor(0x67b7dc, 0.8)}"
					-->
					
						<!--
				<mx:ColumnSeries id="series_kwrf" itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.ColumnRenderer4MergedModel"
					xField="@lst" yField="@val" displayName="KWRF" >
					<mx:fill>
						<mx:SolidColor color="{ChartStyleAssets.SC_SHRT_KWRF.color}" />
	                </mx:fill>
				</mx:ColumnSeries>	  
	                	-->
					
				<mx:ColumnSeries id="series_ecmw" itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.ColumnRenderer4MergedModel"
					xField="@lst" yField="@val" displayName="ECMWF" >
					<mx:fill>
	                	<mx:SolidColor color="{ChartStyleAssets.SC_SHRT_ECMW.color}" />
	                </mx:fill>
				</mx:ColumnSeries>	  
					<!--
					fill="{new SolidColor(ChartStyleAssets.SC_SHRT_ECMW.color,0.8)}" 
					stroke="{new Stroke(0x000000,1,.2)}" 
					fill="{new SolidColor(0xf6a93b, 0.8)}"
					-->
				
			
		</mx:series>
	</mx:ColumnChart>
