<?xml version="1.0" encoding="utf-8"?>
<mx:ColumnChart xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="150"  columnWidthRatio="1.0"
	gutterLeft="35" gutterRight="35"
	showDataTips="true" dataTipFunction="dataTipFunc"  dataTipMode="multiple" 
	creationComplete="moveAxisRenderer(parentApplication.isExistOnlyKWRF)"
	>
	<!--
	itemRollOverColor="haloSilver" itemSelectionColor="haloBlue"   selectionMode="single"
	initialize="moveAxisRenderer(false)"
	creationComplete="addAnnotationElements()"-->
	
	<mx:Script>
		<![CDATA[
			import mx.charts.ChartItem;
			import mx.charts.HitData;
			import mx.charts.chartClasses.CartesianCanvasValue;
			import mx.charts.chartClasses.Series;
			import mx.controls.Label;
			import mx.graphics.IFill;
			import mx.graphics.SolidColor;
			import mx.graphics.Stroke;
			
			import asset.DFS.timeSeries.meteogram.style.ChartStyleAssets;
			
			import comp.util.common.CommonUtil;
			
			
			
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/rn3/SHRT_00UTC_odd.png')] private var bg_00UTC_odd:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/rn3/SHRT_00UTC_even.png')] private var bg_00UTC_even:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/rn3/SHRT_12UTC_odd.png')] private var bg_12UTC_odd:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/rn3/SHRT_12UTC_even.png')] private var bg_12UTC_even:Class;
			
			
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/rn3/SHRT_00UTC_odd.png')] private var bg_00UTC_odd_KWRF:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/rn3/SHRT_00UTC_even.png')] private var bg_00UTC_even_KWRF:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/rn3/SHRT_12UTC_odd.png')] private var bg_12UTC_odd_KWRF:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/gridLines/KWARF/rn3/SHRT_12UTC_even.png')] private var bg_12UTC_even_KWRF:Class;
			
			
			private function drawLine():void{
		        canvas.lineStyle(2,  0xFF0000, 1,   true, 
		            LineScaleMode.NORMAL, 
		            CapsStyle.ROUND, 
		            JointStyle.MITER, 
		            2
		        );
		        	canvas.drawCircle(0,0,100);
			        canvas.moveTo(0, 0);
			        canvas.lineTo(100, 100);
			}
			
			public function moveAxisRenderer(isKWRF:Boolean):void{
				if(!isKWRF){
					moveAxisLabel();
				}else{
					trace('chart is KWARF_SHRT:: '+isKWRF.toString())
				}
			}
			
			public function moveAxisLabel():void{
				trace('calllater:: moveAxisLabel')
				topAxisRenderer.move(topAxisRenderer.x-8,topAxisRenderer.y);
				bottomAxisRenderer.move(bottomAxisRenderer.x-8,bottomAxisRenderer.y);
			}
			
			private function dataTipFunc(e:HitData):String {
		        var s:String;
		        var dateTime:String = Object(e.item).@lst;
		        s  = "<B>" + Object(e.element).displayName+'</B>\n'; 
		        s +=  dateTime.substr(0,2) + '일 ' + dateTime.substr(2,4) + '시\n'; 
		        s += "------------\n";
		        s += Object(e.item).@val + ' %';
//		        s += "SEA:   <FONT COLOR='#3281DB'> " + e.item.sea + "</FONT>\n";
//				s += '\n'+e.item.val;
		        return s;
		     }   
			
			 private function getProperBG(is00UTC:Boolean, isOdd:Boolean, isKWARF:Boolean=false):Object{
		 		if(isOdd){
					if(is00UTC){
						if(isKWARF){
							return new bg_00UTC_odd_KWRF();						
						}else{
							return new bg_00UTC_odd();						
						}
					}else{
						if(isKWARF){
							return new bg_12UTC_odd_KWRF();						
						}else{
							return new bg_12UTC_odd();						
						}	
					}
				}else{
					if(is00UTC){
						if(isKWARF){
							return new bg_00UTC_even_KWRF();						
						}else{
							return new bg_00UTC_even();						
						}	
					}else{
						if(isKWARF){
							return new bg_12UTC_even_KWRF();						
						}else{
							return new bg_12UTC_even();						
						}
					}
				}	
			}
			
			public function setAlternateFill(is00UTC:Boolean, isOdd:Boolean, isKWARF:Boolean=false):void{
				var bgImg:Object = getProperBG(is00UTC, isOdd, isKWARF);
				bgImg.alpha = 1.0
				var gridLine:GridLines = new GridLines();
				gridLine.setStyle("direction","both");
				gridLine.setStyle("verticalTickAligned",true);
      			gridLine.setStyle("verticalStroke",ChartStyleAssets.glStroke_v);
      			gridLine.setStyle("horizontalStroke",ChartStyleAssets.glStroke_v);
				this.backgroundElements=[bgImg,gridLine];
			}
			
			
			
			
			
			
			[Embed (source = "/asset/DFS/timeSeries/meteogram/style/12UTC_POP.gif")] 
			public var UTC12_bg:Class;
			
			
			public function setDefaultStroke(val:Number=0.9):void{
				for each(var cs:ColumnSeries in this.series){
					var colour:int = CommonUtil.getInstance().getStrokeColourByModelName(cs.id,true,false);
					cs.setStyle("fill", new SolidColor(colour));
					cs.setStyle("alpha",val);
					cs.setStyle("stroke", new Stroke(0x000000, 0, 0));
//					cs.selectedIndices = [];
				}
			}
			
			
			public function addAnnotationElements(currSeries:Series,isVisible:Boolean):void{
				trace('DFS_POP_MergedModel.addAnnotationElement()')
				canvas.removeAllChildren();
				if(!isVisible){
					setDefaultStroke();
					return;
				}
				if(! CommonUtil.getInstance().isFileExist(parentApplication.mDictionary,currSeries.displayName)){
					setDefaultStroke();
					return;
				}
				if(currSeries.dataProvider != null){
					setDefaultStroke(0.3);
					
					var colour:int = CommonUtil.getInstance().getStrokeColourByModelName(currSeries.id,true,true);
					currSeries.setStyle("fill", new SolidColor(colour));
					currSeries.setStyle("alpha", 1);
					currSeries.setStyle("stroke", new Stroke(0x000000,1,1));
					
					for each(var item:XML in currSeries.dataProvider){
						addLabelsToColumn(item["@lst"], item["@val"]);
					}
				}
			}
		
		
			private function addLabelsToColumn(lst:String, val:Number):void{
					var lbl:Label = new Label();
					lbl.text =val + "";
					lbl.setActualSize(lbl.getExplicitOrMeasuredWidth(),lbl.getExplicitOrMeasuredHeight());	
					lbl.width = 30; lbl.height = 20;
					lbl.truncateToFit = true;
					lbl.setStyle("fontSize","12");
					lbl.setStyle("textAlign","center");
					canvas.addDataChild(lbl, new CartesianCanvasValue(lst,-(lbl.width / 2)), new CartesianCanvasValue(val+16,0));
			}
			
  			private function doNothing():void{}

			public function set00UTC_gridLines():void{
				var bgImg:Object = new UTC12_bg();
				bgImg.alpha = .3;	
//				var bgi:GridLines = new GridLines();
				gridLine.setStyle("direction","horizontal");
				gridLine.setStyle("verticalTickAligned",true);
				var hs:Stroke = new Stroke(0x000000, 1,0.3);
      			gridLine.setStyle("horizontalStroke",hs);
				this.backgroundElements=[bgImg,gridLine];	
			}
			
				
			private function defineVerticalLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
	  			var str:String =(cat=="125") ?  "%" : cat+"";
				return str;
  			}
  			
  			
			public function defineLabel(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
				var itm:XML = this.dataProvider[this.dataProvider.length-1];
				if(cat.toString().length > 4){
					return cat.toString().substring(0,2)+"/"+cat.toString().substring(2,4);
			    }else{
			    	if(Number(cat.toString().substring(2,4))%6 !=0){
						return '';
					}else if(itm.@lst==cat){
						return '';
					}
			    }
			        return cat+"";
			}
			
			
			
			
			public function defineLabel_00UTC(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
				var itm:XML = this.dataProvider[0];
					if(itm.@lst==cat){
						return null;
					}
					return cat.toString().substring(0,2)+"/"+cat.toString().substring(2,4);
			}
			
			
			/**
			 *  <mx:ColumnSeries
			 *  	fillFunction="{fillFunction}"
			 * 	/>
			 * */
			private function fillFunction(item:ChartItem, index:Number):IFill{
				if(item.item.@val > 100){
					return new SolidColor(0xFFFFFF);
				}else{
					return new SolidColor(0x000000);
				}
			}
			
			
		]]>
	</mx:Script>
		

		<!-- cartesianDataCanvas -->
		<mx:annotationElements>
			<mx:CartesianDataCanvas id="canvas" includeInRanges="true"/>
		</mx:annotationElements>
		
		<!-- GridLines.verticalTickAligned = false  -->
		<mx:backgroundElements>
            <mx:GridLines id="gridLine"
            	direction="both" 
            	verticalTickAligned="false" 
            	
            	verticalStroke="{ChartStyleAssets.glStroke_v}" 
            	horizontalStroke="{ChartStyleAssets.glStroke_h}" 
            	/>
            	
        </mx:backgroundElements>
        
        <!-- axis renderering -->
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer placement="left" 
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"   
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/> 
			<mx:AxisRenderer placement="right" 
				minorTickPlacement="none"  
				tickPlacement="none" 
				axis="{axis_ver}"  
				axisStroke="{ChartStyleAssets.axisStroke}"
				fontSize="11" 
			/>
		</mx:verticalAxisRenderers>
		
		<!-- labelAlign=right POP RN3 SN3-->
		<mx:horizontalAxisRenderers>
		<!--color="0x555555"-->
			<mx:AxisRenderer id="topAxisRenderer" 
				showLabels="false" 
           		placement="top" 
               	canDropLabels="false"
            	tickPlacement="none" 
            	minorTickPlacement="none"   
            	fontSize="17"  fontWeight="bold"
				axisStroke="{ChartStyleAssets.invisibleAxis}"  
	           	axis="{axis_hor}"
				labelAlign="right" 
	           	/>
			<mx:AxisRenderer id="topAxisRenderer2"
				showLabels="false" 
           		placement="top" 
            	tickPlacement="none" 
            	minorTickPlacement="none"   
				axisStroke="{ChartStyleAssets.axisStroke}" labelGap="-10"  
	           	axis="{axis_hor}"
	           	/>
			<mx:AxisRenderer id="bottomAxisRenderer"
				showLabels="false"
           		placement="bottom" 
                canDropLabels="true"
                tickPlacement="none" 
            	minorTickPlacement="none"  
            	fontSize="17" fontWeight="bold" 
				axisStroke="{ChartStyleAssets.invisibleAxis}"
           		axis="{axis_hor}"
				labelAlign="right"
           		/>
			<mx:AxisRenderer id="bottomAxisRenderer2"
				showLabels="false"
           		placement="bottom"  
                canDropLabels="true"
                tickPlacement="none" 
            	minorTickPlacement="none"  
            	fontSize="17" fontWeight="bold" 
				axisStroke="{ChartStyleAssets.axisStroke}" labelGap="-10"
           		axis="{axis_hor}"
				labelAlign="right"
           		/>
		</mx:horizontalAxisRenderers>
		
		<mx:horizontalAxis>
			<mx:CategoryAxis id="axis_hor" categoryField="@lst" labelFunction="defineLabel" />
		</mx:horizontalAxis> 
		<mx:verticalAxis>
			<mx:LinearAxis id="axis_ver" 
				minimum="0" 
				maximum="125" 
				interval="25" 
				labelFunction="defineVerticalLabel"/>
		</mx:verticalAxis>
		
		
		<!--drop the columnSeries shadow..-->
		<mx:seriesFilters>
			<mx:Array/>
		</mx:seriesFilters>
		
		<mx:series>
		
			
				
<!--		
				<mx:ColumnSeries id="series_best" fill="{ChartStyleAssets.SC_SHRT_KWRF}"  
					itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.ColumnRenderer4MergedModel"
					xField="@lst" yField="@val"  displayName="BEST"/>

-->					
				<mx:ColumnSeries id="series_pmos"  fill="{ChartStyleAssets.SC_SHRT_PMOS}" 
					itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.ColumnRenderer4MergedModel"
					xField="@lst" yField="@val"  displayName="PMOS"/>
					<!--
						stroke="{new Stroke(0x000000,1,.3)}"
					-->
				<mx:ColumnSeries id="series_rdps" fill="{ChartStyleAssets.SC_SHRT_RDPS}"  
					itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.ColumnRenderer4MergedModel"
					xField="@lst" yField="@val"  displayName="RDPS"/>
				<!--
				<mx:ColumnSeries id="series_kwrf" fill="{ChartStyleAssets.SC_SHRT_KWRF}"  
					itemRenderer="asset.DFS.timeSeries.meteogram.itmRenerer.ColumnRenderer4MergedModel"
					xField="@lst" yField="@val"  displayName="KWRF"/>
				-->
				
				
			
		</mx:series>
	</mx:ColumnChart>
